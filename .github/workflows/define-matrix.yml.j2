{% if distro_release == "rawhide" %}
{# Centralized matrix generation for all workflows #}
{% set matrix_by_branch = {} %}
{% for rel in supported_releases %}
  {% set branch_key = rel.target_branch %}
  {% if branch_key not in matrix_by_branch %}
    {% set _ = matrix_by_branch.update({branch_key: []}) %}
  {% endif %}
  {# Always generate with full release names, filtering will be done at runtime #}
  {% set release_name = rel.release %}
  {# Create matrix entry with all required variables:
       - release: Empty string for most releases, full name for non-rawhide fedora releases (used for status naming)
       - target_branch: The branch this release targets
       - ci_tag: The actual release name (used for container tags, etc.) #}
  {% set _ = matrix_by_branch[branch_key].append({
    'release': release_name,
    'target_branch': rel.target_branch,
    'ci_tag': rel.release
  }) %}
{% endfor %}

name: Define Matrix

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to filter matrix for (empty for all branches)'
        required: false
        type: string
        default: ''
      use_full_releases:
        description: 'Set to "false" to replace current branch in "release" with empty string. This makes name of the check for the default release per branch always have the same name, so that it can be added to required checks on GitHub'
        required: false
        type: string
        default: 'true'
    outputs:
      releases:
        description: 'Matrix data for the target branch or all branches if no target specified'
        value: ${{ jobs.define-matrix.outputs.releases }}

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      releases: ${{ steps.get_matrix.outputs.matrix }}
    steps:
      - name: Get matrix for target branch
        id: get_matrix
        run: |
          MATRIX_DATA='{$ matrix_by_branch | tojson $}'

          if [ -z "${{ inputs.target_branch }}" ]; then
            # Get all releases from all branches using map
            MATRIX=$(echo "$MATRIX_DATA" | jq -c 'map(.[]) | flatten')
          else
            # Get releases for specific branch
            MATRIX=$(echo "$MATRIX_DATA" | jq -c ".[\"${{ inputs.target_branch }}\"]")
          fi

          if [ "${{ inputs.use_full_releases }}" != "true" ]; then
            # Filter release names: empty for most, full name for non-rawhide fedora releases
            MATRIX=$(echo "$MATRIX" | jq -c '
              map(. + {
                "release": (
                  if (.release | startswith("fedora-")) and (.release != "fedora-rawhide")
                  then .release
                  else ""
                  end
                )
              })
            ')
          else
            # Ensure MATRIX is always an array for consistent output format
            MATRIX=$(echo "$MATRIX" | jq -c 'if type == "array" then . else [.] end')
          fi

          # Create matrix with release array and include array
          RELEASES=$(echo "$MATRIX" | jq -c '[.[].release]')
          echo "matrix={\"release\":$RELEASES,\"include\":$MATRIX}" >> $GITHUB_OUTPUT
{% endif %}
