name: Run validation tests
on: pull_request

permissions:
  contents: read

# when force pushing the pr, cancel previous tests if still running
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

{% set branch = branch_name %}
{% set current_release = distro_name + '-' + (distro_release|string) %}
{# Filter supported releases for current branch and create matrix data #}
{% set matrix_data = [] %}
{% for rel in supported_releases %}
  {# Only include releases that match the current branch #}
  {% if rel.target_branch == branch %}
    {# Replace current branch in "release" with empty string. This makes name of the check for
       the current branch always have the same name, so that it can be added to required
       checks on GitHub. #}
    {% set release_name = '' if rel.release == current_release else rel.release %}
    {# Create matrix entry with all required variables:
         - release: Either empty string (current) or release name (others)
         - target_branch: The branch this release targets
         - ci_tag: The actual release name (used for container tags, etc.) #}
    {% set _ = matrix_data.append({
      'release': release_name,
      'target_branch': rel.target_branch,
      'ci_tag': rel.release
    }) %}
  {% endif %}
{% endfor %}

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      {# Matrix includes all releases for current branch #}
      matrix:
        release: [{$ matrix_data | map(attribute='release') | map('tojson') | join(', ') $}]
        include:
      {% for item in matrix_data %}
          - release: '{$ item.release $}'
            target_branch: '{$ item.target_branch $}'
            ci_tag: '{$ item.ci_tag $}'
      {% endfor %}
    env:
      CI_TAG: '${{ matrix.ci_tag }}'
      # Always avoid using cache because cache is not correctly invalidated.
      CONTAINER_BUILD_ARGS: '--no-cache ${{ matrix.build-args }}'
      TARGET_BRANCH_NAME: 'origin/${{ matrix.target_branch }}'

    steps:
      - name: Clone repository
        uses: actions/checkout@v5
        with:
          # TODO: Are we able to remove ref, fetch-depth and Rebase task? Seems that the checkout
          # without ref is doing the rebase for us.
          # otherwise we are testing target branch instead of the PR branch (see pull_request_target trigger)
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Rebase to current ${{ env.TARGET_BRANCH_NAME }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 ${{ env.TARGET_BRANCH_NAME }}
          git rebase ${{ env.TARGET_BRANCH_NAME }}

      - name: Check if rebuild of the container image is required
        id: check-dockerfile-changed
        run: |
          changes=$(git diff $TARGET_BRANCH_NAME..HEAD -- dockerfile/anaconda-ci/ anaconda.spec.in)
          # print for debugging
          echo "$changes"
          [ -z "$changes" ] || echo "changed=true" >> $GITHUB_OUTPUT

      # build container if files for dockerfile changed in the PR
      - name: Build anaconda-ci container
        if: steps.check-dockerfile-changed.outputs.changed
        run: make -f Makefile.am anaconda-ci-build

      - name: Run tests in anaconda-ci container
        run: |
          # put the log in the output, where it's easy to read and link to
          make -f Makefile.am container-ci || { cat test-logs/test-suite.log; exit 1; }

      - name: Upload test and coverage logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'logs (${{ matrix.ci_tag }})'
          path: test-logs/*

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  rpm-tests:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      {# Matrix includes all releases for current branch #}
      matrix:
        release: [{$ matrix_data | map(attribute='release') | map('tojson') | join(', ') $}]
        include:
        {% for item in matrix_data %}
          - release: '{$ item.release $}'
            target_branch: '{$ item.target_branch $}'
            ci_tag: '{$ item.ci_tag $}'
        {% endfor %}
    env:
      CI_TAG: '${{ matrix.ci_tag }}'
      # Always avoid using cache because cache is not correctly invalidated.
      CONTAINER_BUILD_ARGS: '--no-cache ${{ matrix.build-args }}'
      TARGET_BRANCH_NAME: 'origin/${{ matrix.target_branch }}'

    steps:
      - name: Clone repository
        uses: actions/checkout@v5
        with:
          # TODO: Are we able to remove ref, fetch-depth and Rebase task? Seems that the checkout
          # without ref is doing the rebase for us.
          # otherwise we are testing target branch instead of the PR branch (see pull_request_target trigger)
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Rebase to current ${{ env.TARGET_BRANCH_NAME }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 ${{ env.TARGET_BRANCH_NAME }}
          git rebase ${{ env.TARGET_BRANCH_NAME }}

      - name: Check if container rebuild is needed
        id: need_rebuild
        run: |
          changed_files=$(git diff --name-only ${{ env.TARGET_BRANCH_NAME }}..HEAD)
          echo -e "Changed files: \n$changed_files\n"

          . .structure-config

          echo "Paths forcing the rebuild:"
          rebuild="false"
          for iter_f in $changed_files ; do
                  for rebuild_f in "${RPM_REBUILD_PATHS[@]}"; do
                          if [[ "$iter_f" =~ "$rebuild_f" ]]; then
                                  echo "$iter_f"
                                  rebuild="true"
                                  break
                          fi
                  done
          done
          echo "rebuild=$rebuild" >> $GITHUB_OUTPUT

      - name: Build RPM test container
        if: ${{ steps.need_rebuild.outputs.rebuild == 'true' }}
        run: make -f Makefile.am anaconda-rpm-build

      - name: Run RPM tests in container
        run: make -f Makefile.am container-rpm-test

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'logs-rpm-test (${{ matrix.ci_tag }})'
          path: test-logs/*
