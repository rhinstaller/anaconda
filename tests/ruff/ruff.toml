# ruff configuration

line-length = 99

[lint]
select = [
    "E", # pycodestyle error
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle warning (mostly whitespace related)
    "PL", # pylint
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # Line too long
    "E402", # Module level import not at top of file
    "F405", # `<type>` may be undefined, or defined from star imports: `<module>`
    "F403", # `from <module> import *` used; unable to detect undefined names
    "E731", # Do not assign a `lambda` expression, use a `def`
    "PLW0603", # Using the global statement to update `<variable>` is discouraged
    "PLR2004", # Magic value used in comparison, consider replacing <value> with a constant variable
    "PLR0913", # Too many arguments to function call (N > 5)
    "PLR0915", # Too many statements (N > 50)
    "PLR0912", # Too many branches (N > 12)
    "PLR0911", # Too many return statements (N > 6)
    "PLR5501", # Consider using `elif` instead of `else` then `if` to remove one indentation level
    "PLC0415", # `import` should be at the top-level of a file
    "PLC1901", # `<str comparison>` can be simplified to `<str comparison>` as an empty string is falsey
    "PLW1641", # Object does not implement `__hash__` method
    "PLW2901", # `for` loop variable `<name>` overwritten by assignment target
    "RUF005", # Consider `<expression>` instead of concatenation
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "SIM108", # Use ternary operator `tag = None if log_formatter else logr.name` instead of `if`-`else`-block
    "SIM115", # Use context handler for opening files
    "SIM105", # Use `contextlib.suppress(<exception-type>)` instead of `try`-`except`-`pass`
    "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM112", # Use capitalized environment variable `<NAME>` instead of `<name>`
    "SIM114", # Combine `if` branches using logical `or` operator
    "SIM103", # Return the condition `<expression>` directly
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM110", # Use `return any(<condition>)` instead of `for` loop
    "PLR1714", # Consider merging multiple comparisons: `<expression>`. Use a `set` if the elements are hashable.
    "RUF015", # Prefer `next(...)` over single element slice
]

[lint.isort]
known-first-party = ["pyanaconda"]
