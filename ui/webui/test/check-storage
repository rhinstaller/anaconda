#!/usr/bin/python3
#
# Copyright (C) 2022 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

# import Cockpit's machinery for test VMs and its browser test API
from .parent import setup_paths
setup_paths()

from .helpers.installer import Installer
from .helpers.storage import Storage
from common.testlib import MachineCase, nondestructive, test_main  # pylint: disable=import-error
from .machine_install import VirtInstallMachine

@nondestructive
class TestStorage(MachineCase):
    MachineCase.machine_class = VirtInstallMachine

    def testLocalStandardDisks(self):
        b = self.browser
        i = Installer(b, self.machine)
        s = Storage(b, self.machine)

        i.open()
        i.next()

        b.wait_visible('section:contains(Local standard disks)')

        # Check disks table details
        s.check_disk_visible("vda")
        s.check_disk_capacity("vda", "16.1 GB", "16.1 GB")

        # Pixel test the storage step
        b.assert_pixels(
            "#app",
            "storage-step-basic",
            ignore=["#betanag-icon", "#installation-destination-table-label", "#installation-destination-hint"],
            wait_animations=False,
        )

        # Check bulk selection of disks
        s.select_all_disks_and_check(["vda"])
        s.select_none_disks_and_check(["vda"])

        s.click_checkbox_and_check_all_disks(["vda"], selected=True)
        s.click_checkbox_and_check_all_disks(["vda"], selected=False)

        # Try unselecting the single disk and expect and error
        s.select_disk("vda", False)
        s.wait_no_disks()
        # Check the next button is disabled if no disks are selected
        i.check_next_disabled()

# We can't run this test case on an existing machine,
# with --machine because MachineCase is not aware of add_disk method
class TestStorageExtraDisks(MachineCase):
    MachineCase.machine_class = VirtInstallMachine

    def testLocalDisksSyncNew(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        s = Storage(b, m)

        # This attaches a disk to the running VM
        # However, since the storage module initialization is long completed
        # the newly added disk, will not be visible in the UI,
        # until the test clicks on the re-scan button
        m.add_disk(2)

        i.open()
        i.next()

        s.wait_no_disks_detected_not_present()

        s.check_disk_visible("vda")
        s.check_disk_visible("vdb", False)

        s.rescan_disks()
        s.check_disk_visible("vda")
        s.check_disk_visible("vdb")

        s.wait_no_disks_detected_not_present()

        s.check_disk_selected("vda", False)
        s.check_disk_selected("vdb", False)

        s.rescan_disks()
        s.wait_no_disks_detected()

if __name__ == '__main__':
    test_main()
