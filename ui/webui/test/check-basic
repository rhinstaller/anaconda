#!/usr/bin/python3
#
# Copyright (C) 2021 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

import anacondalib

from installer import Installer
from language import Language
from review import Review
from storage import Storage
from testlib import nondestructive, test_main  # pylint: disable=import-error


@nondestructive
class TestBasic(anacondalib.VirtInstallMachineCase):

    def testNavigation(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)

        i.open()

        self.assertIn(
            b.attr("#app .pf-c-page", "data-debug").lower(),
            ["false", "true"]
        )

        i.check_prerelease_info()
        # Do not start the installation in non-destructive tests as this performs non revertible changes
        # with the pages basically empty of common elements (as those are provided by the top-level installer widget)
        # we at least iterate over them to check this works as expected
        i.reach(i.steps.REVIEW)

        # Ensure that the 'actual' UI process is running/
        self.assertIn("/usr/libexec/webui-desktop", m.execute("ps aux"))

    def testLanguageScreenHiddenLive(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        r = Review(b)

        self.restore_file('/run/anaconda/anaconda.conf')
        m.execute("sed -i 's/type = BOOT_ISO/type = LIVE_OS/g' /run/anaconda/anaconda.conf")

        # For live media the first screen is the installation-method
        i.open(step="installation-method")

        # Back button should be disabled on the first screen
        b.wait_visible(f"#installation-back-btn:not([aria-disabled={True}]")

        # For live media in the review screen language details should still be displayed
        i.reach(i.steps.REVIEW)
        r.check_language("English (United States)")

    def testAboutModal(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)

        i.open()

        # Obtain pretty name and versions from the CLI
        pretty_name = m.execute("cat /etc/os-release | grep PRETTY_NAME | cut -d '\"' -f 2 | tr -d '\n'")
        version = m.execute("anaconda --version | cut -d ' ' -f 2 | tail -1")

        # Click on the kebab
        b.click("#toggle-kebab")

        # Click on the "About" item from the dropdown
        b.click("#about-modal-dropdown-item")

        # Expect PRETTY_NAME to be shown in modal title
        b.wait_in_text("#about-modal-title", pretty_name)

        # Expect "Powered by Anaconda" to be shown in modal subtitle
        b.wait_in_text("#about-modal-subtitle", "Powered by Anaconda")

        # Expect About modal body to be shown
        b.wait_in_text("#about-modal-versions dt", "Anaconda")
        b.wait_in_text("#about-modal-versions dd", version.strip())

        # Expect button link for Anaconda project page to be shown
        b.wait_in_text("#anaconda-page-button", "Anaconda project page")

        # Pixel test the language step
        b.assert_pixels(
            ".pf-c-about-modal-box",
            "about-modal",
            ignore=["#about-modal-versions dd"],
            wait_animations=False,
        )

        #Close about modal
        b.click(".pf-c-button[aria-label='Close Dialog']")
        b.wait_not_present("#about-modal")

class TestQuit(anacondalib.VirtInstallMachineCase):

    def testQuitInstallation(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)

        i.open()
        i.quit()
        m.wait_poweroff()


    # TODO: Try converting this to a non-destructive test
    def testErrorHandling(self):
        b = self.browser
        m = self.machine
        i = Installer(b, m)
        l = Language(b, m)
        s = Storage(b, m)

        # BIOS boot /boot on ext4 / on xfs /home on btrfs
        disk = "/dev/vda"
        dev = "vda"
        s.partition_disk(disk, [("1MiB", "biosboot"), ("1GB", "ext4"), ("10GiB", "xfs"), ("", "ext4")])
        s.udevadm_settle()

        # Two partitions on the same disk with the same UUID raise exception in
        # Blivet
        s.set_partition_uuid(disk, 3, "66f47a35-b00e-4341-8f31-f4855fac24a2")
        s.set_partition_uuid(disk, 4, "66f47a35-b00e-4341-8f31-f4855fac24a2")

        i.open()
        i.next()

        b.wait_not_present("#critical-error-modal")

        s.rescan_disks()

        b.wait_visible("#critical-error-modal")

        # Exit installer
        b.click("#critical-error-modal .pf-c-button.pf-m-secondary")
        m.wait_poweroff()

if __name__ == '__main__':
    test_main()
