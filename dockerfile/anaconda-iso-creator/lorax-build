#!/bin/bash
#
# Build a boot.iso by lorax. The boot.iso will be stored in the `/images/` directory.
# We have to build the RPMs files of Anaconda first and then add them as volume
# mount to /anaconda-rpms to the container (could be RO mount).
#
#   make -f ./Makefile.am container-rpms-scratch
#
# Input directory:
# /anaconda-rpms/ (Anaconda RPM files for the build)
#
# Output directory:
# /images (Where the boot.iso will be stored)
#

set -eux

# pre-create loop devices manually. In the container you can't use losetup for that.
mknod -m 0660 /dev/loop0 b 7 0  2> /dev/null || true
mknod -m 0660 /dev/loop1 b 7 1  2> /dev/null || true

INPUT_RPMS=/anaconda-rpms/
REPO_DIR=/tmp/anaconda-rpms/

# create repo from provided Anaconda RPMs
mkdir -p $REPO_DIR
cp -a $INPUT_RPMS/* $REPO_DIR
createrepo_c $REPO_DIR

# build boot.iso with our rpms
. /etc/os-release
MAJOR_VERSION=${VERSION_ID%%.*}
MINOR_VERSION=${VERSION_ID#*.}
# The --volid argument can cause different network interface naming: https://github.com/rhinstaller/kickstart-tests/issues/448
lorax -p RHEL -v $MAJOR_VERSION -r $MINOR_VERSION --volid RHEL-$MAJOR_VERSION-$MINOR_VERSION-0-BaseOS-x86_64 \
      --nomacboot \
      -s http://download.devel.redhat.com/rhel-9/nightly/RHEL-9/latest-RHEL-9.6.0/compose/BaseOS/x86_64/os/ \
      -s http://download.devel.redhat.com/rhel-9/nightly/RHEL-9/latest-RHEL-9.6.0/compose/AppStream/x86_64/os/ \
      -s file://$REPO_DIR/ \
      $@ \
      lorax

cp lorax/images/boot.iso /images/
